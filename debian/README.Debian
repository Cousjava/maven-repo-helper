
This package contains some essential tools for building Debian packages where upstream uses Maven as its build tool,
or where upstream uses another build tool (Ant...) but you want to deploy the jars into the Debian Maven repository
at /usr/share/maven-repo with the necessary metadata - in Maven terms, POM files - and make them available to other
projects.

== The Debian Maven repository ==

/usr/share/maven-repo contains a Maven-compatible repository but entirely managed by Debian.

One differentiating feature of this repository is that you will find for most artifacts only 2 versions: one current version, and a
symbolic version, usually named 'debian'. The reason for this is simple: the Debian project tries to keep the number of versions
for its libraries to its minimum, that's in order to ease the maintenance burden and make upgrades of shared libraries easier.
So that's why there is usually one current version of the library. The symbolic (or debian) version of the library is there in
order to minimize the amount of change when one library is updated.

This leads to another feature of the repository: the POM files are stripped of some elements, like <build> tags with the details
of the build process - this is similar to what is done in Maven Central, but if you look at the versions in the <dependency> section,
you will notice that most of them point to a symbolic 'debian' version (or 2.x or similar). The reason for this is simple:
if the dependency is updated, its symbolic version will stay the same but the jar itself will be updated. As we point already
to this symbolic version, then we see no change and that means that upgrading one package will not force upgrades of the packages
using it. 
Note: In Maven 3.0, the support for version ranges should start to work well, so it will be possible to replace the version in the
dependency by a version range to achieve a similar effect (easy upgrades) and be even more compatible with upstream Maven.

There are other changes made to the POM files. For example, some properties are inserted in the POM:
  - debian.originalVersion: to keep track of the original version of the artifact
  - debian.package: the name of the Debian package containing the artifact. Used by mh_make
  - debian.mavenRules: the substitution rules applied on the groupId, artifactId and version of this artifact. Used by mh_make

A tool is provided, mh_checkrepo, which checks the consistency of the Maven repository and it's useful to run it from time to time
when you are packaging software, the goal is to keep the number of errors and warnings low.

== Installing artifacts in the Debian Maven repository ==

mh_installjar and mh_installpoms are the main tools to use when you want to install an artifact and its metadata in the repository.
They take care of putting the files at the correct locations, maintain the integrity of the repository and cleanup the POM files
before their inclusion in the repository.
mh_install does the job of mh_installpoms and mh_installjar in one go, but requires additional information in the .poms file
to work (--artifact=<path> option for each jar to install)
mh_installpom, mh_linkjar, mh_linkrepojar are also available for some special needs when installing an artifact in the repository.
The maven.mk CDBS script provided by maven-debian-helper can also install artifacts with the correct transformations to the repository.

To use those tools in your package, use the following templates, or try mh_make (provided by maven-debian-helper) which can build
most of the packaging control files from the upstream sources with either Maven or Ant as the build system, provided that the POM
files are present.

* Template debian/rules for installing a single artifact into the Maven repository: 
=======================
include /usr/share/cdbs/1/rules/debhelper.mk

PACKAGE := $(DEB_SOURCE_PACKAGE)
VERSION := $(DEB_UPSTREAM_VERSION)

binary-post-install/lib$(PACKAGE)-java::
	# Install all POM files registered in debian/$package.pom into /usr/share/maven-repo,
        mh_installpoms -plib$(PACKAGE)-java
	# Install the jar file associated with the POM into /usr/share/maven-repo,
	# The -l option tells it to also add a link to the jar into /usr/share/java, with and without the version (to comply with
	# the Debian Java packaging guidelines)
        mh_installjar -plib$(PACKAGE)-java -l pom.xml build/$(PACKAGE)-$(VERSION).jar 

# Cleanup temporary files
clean::
        -mh_clean
=======================

You will need also at least a file called debian/<package>.poms (where <package> is the name of the binary package) and containing:
=======================
pom.xml
=======================


* Template debian/rules for installing multiple artifacts into the Maven repository: 
=======================
include /usr/share/cdbs/1/rules/debhelper.mk

PACKAGE := $(DEB_SOURCE_PACKAGE)
VERSION := $(DEB_UPSTREAM_VERSION)

binary-post-install/lib$(PACKAGE)-java::
	# Install all POM files registered in debian/$package.pom into /usr/share/maven-repo,
        mh_installpoms -plib$(PACKAGE)-java
	# Install the jar file associated with the POM into /usr/share/maven-repo,
	# The -l option tells it to also add a link to the jar into /usr/share/java, with and without the version (to comply with
	# the Debian Java packaging guidelines)
        mh_installjar -plib$(PACKAGE)-java -l module1/pom.xml module1/target/module1-$(VERSION).jar 
        mh_installjar -plib$(PACKAGE)-java -l module2/pom.xml module2/target/module2-$(VERSION).jar 

# Cleanup temporary files
clean::
        -mh_clean
=======================

You will need also at least a file called debian/<package>.poms (where <package> is the name of the binary package) and containing:
=======================
# Remove the <parent> tag from the multiproject POM
pom.xml --no-parent
module1/pom.xml
module2/pom.xml
=======================

* debian/<package>.poms (where <package> is the name of the binary package):

This file lists the POM files in the source tree which need to be installed in the repository, and you provide options for each POMs:
--ignore: to ignore the module built with this POM, and to not install the POM and its artifacts in the repository
--no-parent: if the POM inherits from a parent POM, then this inheritance relationship will be removed in the cleaned POM.
  Removing the parent inheritance can often simplify the packaging, as quite often the parent POM does not contain any
  useful information - we need only the list of dependencies in our repository, the other details for the build are irrelevant.
  But do take care of the configuration for plugins or properties defined in the parent POM, as they can be useful when the
  package uses Maven for its build and will be a motivating factor to keep the parent POM.
--package=<package>: to install the POM and its artifacts in a different Debian package than the first package
  defined in debian/control
--has-package-version: to indicate that the original version of the POM is the same as the upstream part
  of the version for the package. This will indicate that version constraints are possible on the packages
  that depend on the current package. For example, the POM for junit:junit:3.8.1 is packaged in the
  junit package which has the Debian version 3.8.1-1. This POM will be registered in the Debian repository
  with the version 3.x, but if a package depends on junit, then we can automatically
  insert in its Depends: or Build-Depends: junit (>= 3.8.1). This can be done using the substitution var
  ${maven:Depends} or using mh_make to generate the control file for the package, or both.
  See maven-debian-helper package for more details.
--keep-elements=<elem1,elem2>: a list of XML elements to keep in the POM during a clean operation with mh_cleanpom or mh_installpom
  Typical elements are amongst build,reports,reporting,prerequisites,profiles.
--artifact=<path>: path to the build artifact associated with this POM, it will be installed when using the command mh_install.
  A good practice is to use paths with wildcards to work around changing versions, for example --artifact=target/junit-*.jar
--java-lib: install the jar into /usr/share/java to comply with Debian packaging guidelines
--usj-name=<name>: name to use when installing the library in /usr/share/java
--usj-version=<version>: version to use when installing the library in /usr/share/java
--no-usj-versionless: don't install the versionless link in /usr/share/java
--dest-jar=<path>: the destination for the real jar

Other configuration files are used by mh_installjar and mh_installpoms. All those files are optional.

* debian/maven.rules:

This file contains the substitution rules to apply on any reference to an artifact present on the original POM during the cleanup phase, that is before adding the POM to the Debian Maven repository.

Its syntax is:
<rule for artifact groupId> <rule for artifact id> <rule for artifact type> <rule for artifact version> [optional rule for artifact classifier] [optional rule for artifact scope]

where a rule can be:
  * - to match any element and leave it unchanged
  <a word> - to match that element only and leave it unchanged
  s/regexp/replacement/ - to match an element with a regexp and replace it. The regexp is in the Java format which is similar to Perl
       for most cases.

And the following elements of the POM can be affected by those rules:
- the groupId, artifactId and version for the current POM
- the <parent> element
- any <dependency>, <plugin> or <extension> element

For example, this is the content of debian/maven.rules from the modello package:

junit junit jar s/3\..*/3.x/

It specifies that the dependency on junit will use the version '3.x' instead of the default 'debian' version if the native version starts with '3.'. If the group id of the dependency is 'junit, the artifact id of the dependency is 'junit', the type of the dependency is 'jar' and the version starts with '3.', then this rule is used. 's/3\..*/3.x/' performs the replacement for the version, the syntax should be obvious to any sed user.

This example from the commons-configuration package shows a few more possibilities: here, the version for commons-collections is converted to '2.x' if it starts with '2.' or '3.x' if it starts with '3.'. The line with ant is more interesting: if the group id is 'ant', then it is converted to 'org.apache.ant' - great trick for dealing with artifacts which are coming from Maven 1. Any artifact id or type will be matched and left unchanged, while the version will be converted to 'debian'. There is also the line with javax.servlet: this line keeps the version number used by this dependency, so if 2.4 is used, then 2.4 is also used in the cleaned POM.

junit junit jar s/3\..*/3.x/
commons-collections commons-collections jar s/2\..*/2.x/
commons-collections commons-collections jar s/3\..*/3.x/
s/ant/org.apache.ant/ * * s/.*/debian/
log4j log4j jar s/1\.2\..*/1.2.x/
javax.servlet servlet-api jar *

* debian/maven.publishedRules:

This file complements debian/maven.rules. The rules defined here are of no immediate use to the package, but they can be useful when
packaging other libraries related to the current package. The rules listed here will be added to the <debian.mavenRules> property added
to the cleaned POM stored in the repository. mh_make will read those additional rules, and use them when you are building the Debian
packaging for an upstream project.
Typically, those rules are used to help migrate POM files built with the Maven 1 conventions to use the Maven 2 conventions.

For example, in the ant package, debian/maven.publishedRules contains:

s/ant/org.apache.ant/ * * s/.*/debian/

Ant used to have the identifier ant:ant in the Maven 1 repository, instead of org.apache.ant:ant.
A project B may still use as a dependency on Ant the following:

  <dependency>
    <groupId>ant</groupId>
    <artifactId>ant</artifactId>
    <version>1.2</version>
  </dependency>

When building the Debian packaging for project B, mh_make will read the published rule
  s/ant/org.apache.ant/ * * s/.*/debian/
from the repository (assuming that the ant package is installed). It will then be able to match B's dependency and transform it into:

  <dependency>
    <groupId>org.apache.ant</groupId>
    <artifactId>ant</artifactId>
    <version>debian</version>
  </dependency>

So now project B can use the version of Ant packaged for Debian.

* debian/maven.ignoreRules:

This file lists the rules which are used to ignore certain dependencies, plugins or extensions present in the upstream POM but that you
want to ignore in a Debian context. The <parent> element is not affected, but can be removed anyway with the --no-parent option.

The syntax of this file is similar to debian/maven.rules, but more relaxed as we are interested here only in elements that match:

<rule for artifact groupId> [rule for artifact id] [rule for artifact type] [rule for artifact version] [rule for artifact classifier] [rule for artifact scope]

Any element, except the first is optional and replaced automatically by * to match anything, but if it omitted then all following
elements must also be omitted.

For example, debian/maven.ignoreRules from the wagon package contains:

junit junit
org.apache.maven.wagon wagon-provider-test

It will instruct the mh_* utilities to remove all references to junit and wagon-provider-test from the POM files in the wagon package.

== Typical workflow when using this package ==

   1. sudo apt-get install maven-repo-helper maven-debian-helper
   2. Get the original sources and unpack them, copy the debian/ folder if you are working on an existing package.
   3. [optional] mh_lspoms
   4. [optional] edit debian/$package.poms to check that only the POM that are needed are present, and maybe to fix the --no-parent options
   5. mh_make --ant
   6. edit debian/rules (to fix the last remaining packaging details)
   7. edit debian/control (to add maven-repo-helper to Build-Depends: ) 



